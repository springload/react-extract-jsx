{"version":3,"sources":["lib/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ExtractJSX","children","setCode","useEffect","timer","setTimeout","result","React","Children","map","child","walk","depth","undefined","Object","keys","length","Array","isArray","c","join","spacer","makeSpacerAtDepth","trim","toString","tagName","type","name","jsx","props","filter","key","forEach","walkedChildren","console","log","includes","childArray","childChildren","clearTimeout","repeat","Div","App","useState","code","isChecked","setIsChecked","className","href","style","border","data-blah","target","rel","checked","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47b4cb42.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n  setCode: (code: string) => void;\n};\n\nexport default function ExtractJSX({\n  children,\n  setCode,\n}: Props): React.ReactElement {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const result = React.Children.map(children, (child) => walk(child, 0));\n      if (!result) return;\n      setCode(result.join(\"\"));\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [children, setCode]);\n\n  return children as React.ReactElement;\n}\n\nfunction walk(child: React.ReactNode, depth: number = 0): string {\n  if (child === undefined) {\n    return \"undefined\";\n  } else if (child === null) {\n    return \"null\";\n  } else if (typeof child === \"object\" && Object.keys(child).length === 0) {\n    return \"\";\n  } else if (Array.isArray(child)) {\n    return child.map((c) => walk(c, depth + 1)).join(\"\");\n  }\n\n  const spacer = makeSpacerAtDepth(depth);\n\n  switch (typeof child) {\n    case \"string\":\n      return spacer + child.trim().toString() + \"\\n\";\n    case \"boolean\":\n    case \"number\":\n      return spacer + child.toString() + \"\\n\";\n  }\n\n  if (Object.keys(child).length === 0) {\n    return \"\";\n  }\n\n  type ReactThing = Exclude<\n    React.ReactNode,\n    | WithoutProperties\n    | string\n    | number\n    | boolean\n    | null\n    | undefined\n    | React.ReactNodeArray\n  >;\n\n  // @ts-ignore\n  const c: ReactThing = child;\n\n  const tagName = typeof c.type === \"string\" ? c.type : c.type.name;\n\n  let jsx = spacer + \"<\";\n\n  jsx += tagName;\n\n  Object.keys(c.props)\n    .filter((key) => key !== \"children\")\n    .forEach((key) => {\n      jsx += ` ${key}=`;\n\n      if (typeof c.props[key] === \"string\") {\n        jsx += `\"${c.props[key]}\"`;\n      } else {\n        const walkedChildren = walk(c.props[key], depth + 1);\n        console.log(c.props[key], walkedChildren);\n        if (walkedChildren.trim().includes(\"\\n\")) {\n          jsx += `{\\n${walkedChildren}${makeSpacerAtDepth(depth + 1)}}`;\n        } else {\n          jsx += `{${walkedChildren.trim()}}`;\n        }\n      }\n    });\n\n  const childChildren = c.props.children;\n  let childArray;\n\n  if (childChildren) {\n    childArray = React.Children.map(childChildren, (child) =>\n      walk(child, depth + 1)\n    );\n  }\n\n  if (childArray) {\n    jsx += \">\\n\";\n    jsx += childArray.join(\"\");\n    jsx += spacer + \"</\";\n    jsx += tagName;\n    jsx += \">\\n\";\n  } else {\n    jsx += \"/>\\n\";\n  }\n  return jsx;\n}\n\nfunction makeSpacerAtDepth(depth: number): string {\n  return \"  \".repeat(depth);\n}\n\ninterface WithoutProperties {\n  [key: string]: never;\n}\n","import React, { useState } from \"react\";\nimport ExtractJSX from \"./lib\";\n\nfunction App() {\n  const [code, setCode] = useState<string>();\n  const [isChecked, setIsChecked] = useState<boolean>();\n\n  return (\n    <div className=\"App\">\n      <h1>\n        <code>react-extract-jsx</code>\n      </h1>\n\n      <p>\n        <a href=\"https://github.com/springload/react-extract-jsx\">\n          See GitHub page for docs\n        </a>\n      </p>\n      <hr />\n\n      <h1> Demo of example JSX </h1>\n      <div style={{ border: \"solid 2px black\" }}>\n        <ExtractJSX setCode={setCode}>\n          <header className=\"App-header\">\n            <p>\n              Edit <code>src/App.tsx</code> and save to reload.\n            </p>\n            <Div\n              className=\"App-link\"\n              data-blah={<Div> sdfsdf</Div>}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </Div>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={isChecked}\n                onClick={() => setIsChecked(!isChecked)}\n              />\n              click to toggle and see updates\n            </label>\n          </header>\n          <b>sdfsdf</b>\n        </ExtractJSX>\n      </div>\n      <h2>JSX of component</h2>\n      <pre>{code}</pre>\n    </div>\n  );\n}\n\nfunction Div(props: any) {\n  return <div {...props} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}